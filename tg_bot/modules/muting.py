import html
from typing import Optional, List

from telegram import Message, Chat, Update, Bot, User
from telegram.error import BadRequest
from telegram.ext import CommandHandler, Filters
from telegram.ext.dispatcher import run_async
from telegram.utils.helpers import mention_html

from tg_bot import dispatcher, LOGGER
from tg_bot.modules.helper_funcs.chat_status import bot_admin, user_admin, is_user_admin, can_restrict
from tg_bot.modules.helper_funcs.extraction import extract_user, extract_user_and_text
from tg_bot.modules.helper_funcs.string_handling import extract_time
from tg_bot.modules.log_channel import loggable


@run_async
@bot_admin
@user_admin
@loggable
def mute(bot: Bot, update: Update, args: List[str]) -> str:
    chat = update.effective_chat  # type: Optional[Chat]
    user = update.effective_user  # type: Optional[User]
    message = update.effective_message  # type: Optional[Message]

    user_id = extract_user(message, args)
    if not user_id:
        message.reply_text("‡∂±‡∑í‡∑Å‡∑ä‡∑Å‡∂∂‡∑ä‡∂Ø ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏ ‡∑É‡∂≥‡∑Ñ‡∑è ‡∂î‡∂∂‡∂ß ‡∂¥‡∂ª‡∑í‡∑Å‡∑ì‡∂Ω‡∂ö ‡∂±‡∑è‡∂∏‡∂∫‡∂ö‡∑ä ‡∂Ω‡∂∂‡∑è ‡∂Ø‡∑ì‡∂∏‡∂ß ‡∑Ñ‡∑ù ‡∂±‡∑í‡∑Å‡∑ä‡∑Å‡∂∂‡∑ä‡∂Ø ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß ‡∂∫‡∂∏‡∑ô‡∂ö‡∑î‡∂ß ‡∂¥‡∑í‡∑Ö‡∑í‡∂≠‡∑î‡∂ª‡∑î ‡∂Ø‡∑ì‡∂∏‡∂ß ‡∂î‡∂∂‡∂ß ‡∂Ö‡∑Ä‡∑Å‡∑ä‚Äç‡∂∫ ‡∑Ä‡∂±‡∑î ‡∂á‡∂≠.")
        return ""

    if user_id == bot.id:
        message.reply_text("‡∂∏‡∂∏ ‡∂∏‡∑è ‡∂ú‡∑ê‡∂±‡∂∏ ‡∂ö‡∂≠‡∑è ‡∂ö‡∂ª‡∂±‡∑ä‡∂±‡∑ö ‡∂±‡∑ê‡∑Ñ‡∑ê!")
        return ""

    member = chat.get_member(int(user_id))

    if member:
        if is_user_admin(chat, user_id, member=member):
            message.reply_text("‡∂∂‡∑í‡∂∫‡∑ô‡∂±‡∑ä ‡∂∏‡∂ß ‡∂¥‡∂ª‡∑í‡∂¥‡∑è‡∂Ω‡∂ö‡∂∫‡∑ô‡∂ö‡∑î ‡∂ö‡∂≠‡∑è ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏ ‡∂±‡∂≠‡∂ª ‡∂ö‡∑Ö ‡∂±‡∑ú‡∑Ñ‡∑ê‡∂ö!")

        elif member.can_send_messages is None or member.can_send_messages:
            bot.restrict_chat_member(chat.id, user_id, can_send_messages=False)
            message.reply_text("üëçüèª ‡∂±‡∑í‡∑Å‡∑ä‡∑Å‡∂∂‡∑ä‡∂Ø ‡∑Ä‡∑í‡∂∫! ü§ê")
            return "<b>{}:</b>" \
                   "\n#MUTE" \
                   "\n<b>Admin:</b> {}" \
                   "\n<b>User:</b> {}".format(html.escape(chat.title),
                                              mention_html(user.id, user.first_name),
                                              mention_html(member.user.id, member.user.first_name))

        else:
            message.reply_text("‡∂∏‡∑ô‡∂∏ ‡∂¥‡∂ª‡∑í‡∑Å‡∑ì‡∂Ω‡∂ö‡∂∫‡∑è ‡∂Ø‡∑ê‡∂±‡∂ß‡∂∏‡∂≠‡∑ä ‡∂±‡∑í‡∑Å‡∑ä‡∑Å‡∂∂‡∑ä‡∂Ø ‡∂ö‡∂ª ‡∂á‡∂≠!)
    else:
        message.reply_text("‡∂∏‡∑ô‡∂∏ ‡∂¥‡∂ª‡∑í‡∑Å‡∑ì‡∂Ω‡∂ö‡∂∫‡∑è ‡∑É‡∂Ç‡∑Ä‡∑è‡∂Ø‡∂∫‡∑ö ‡∂±‡∑ú‡∂∏‡∑ê‡∂≠!")

    return ""


@run_async
@bot_admin
@user_admin
@loggable
def unmute(bot: Bot, update: Update, args: List[str]) -> str:
    chat = update.effective_chat  # type: Optional[Chat]
    user = update.effective_user  # type: Optional[User]
    message = update.effective_message  # type: Optional[Message]

    user_id = extract_user(message, args)
    if not user_id:
        message.reply_text("‡∂ë‡∂ö‡∑ä‡∂ö‡∑ù ‡∂î‡∂∂ ‡∂∏‡∂ß ‡∂±‡∑í‡∑Å‡∑ä‡∑Å‡∂∂‡∑ä‡∂Ø ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß ‡∂¥‡∂ª‡∑í‡∑Å‡∑ì‡∂Ω‡∂ö ‡∂±‡∑è‡∂∏‡∂∫‡∂ö‡∑ä ‡∂Ω‡∂∂‡∑è ‡∂Ø‡∑í‡∂∫ ‡∂∫‡∑î‡∂≠‡∑î‡∂∫, ‡∂±‡∑ê‡∂≠‡∑Ñ‡∑ú‡∂≠‡∑ä ‡∂±‡∑í‡∑Å‡∑ä‡∑Å‡∂∂‡∑ä‡∂Ø ‡∑Ä‡∑ì‡∂∏‡∂ß ‡∂∫‡∂∏‡∑ô‡∂ö‡∑î‡∂ß ‡∂¥‡∑í‡∑Ö‡∑í‡∂≠‡∑î‡∂ª‡∑î ‡∂Ø‡∑í‡∂∫ ‡∂∫‡∑î‡∂≠‡∑î‡∂∫.")
        return ""

    member = chat.get_member(int(user_id))

    if member.status != 'kicked' and member.status != 'left':
        if member.can_send_messages and member.can_send_media_messages \
                and member.can_send_other_messages and member.can_add_web_page_previews:
            message.reply_text("This user already has the right to speak.")
        else:
            bot.restrict_chat_member(chat.id, int(user_id),
                                     can_send_messages=True,
                                     can_send_media_messages=True,
                                     can_send_other_messages=True,
                                     can_add_web_page_previews=True)
            message.reply_text("Unmuted!")
            return "<b>{}:</b>" \
                   "\n#UNMUTE" \
                   "\n<b>Admin:</b> {}" \
                   "\n<b>User:</b> {}".format(html.escape(chat.title),
                                              mention_html(user.id, user.first_name),
                                              mention_html(member.user.id, member.user.first_name))
    else:
        message.reply_text("‡∂∏‡∑ô‡∂∏ ‡∂¥‡∂ª‡∑í‡∑Å‡∑ì‡∂Ω‡∂ö‡∂∫‡∑è ‡∂ö‡∂≠‡∑è‡∂∂‡∑É‡∑ä‡∑Ä‡∂Ω ‡∂¥‡∑Ä‡∑è ‡∂±‡∑ú‡∑É‡∑í‡∂ß‡∑í‡∂± ‡∂Ö‡∂≠‡∂ª, ‡∂í‡∑Ä‡∑è ‡∂±‡∑í‡∑Å‡∑ä‡∂ö‡∑ä‚Äç‡∂ª‡∑ì‡∂∫ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∑ô‡∂±‡∑ä ‡∂î‡∑Ä‡∑î‡∂±‡∑ä‡∂ß ‡∑Ä‡∂©‡∑è ‡∂ö‡∂≠‡∑è ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß ‡∂±‡∑ú‡∑Ñ‡∑ê‡∂ö‡∑í ‡∑Ä‡∂±‡∑î ‡∂á‡∂≠ "
                           "‡∂Ø‡∑ê‡∂±‡∂ß‡∂∏‡∂≠‡∑ä ‡∂ö‡∂ª‡∂±‡∑ä‡∂±!")

    return ""


@run_async
@bot_admin
@can_restrict
@user_admin
@loggable
def temp_mute(bot: Bot, update: Update, args: List[str]) -> str:
    chat = update.effective_chat  # type: Optional[Chat]
    user = update.effective_user  # type: Optional[User]
    message = update.effective_message  # type: Optional[Message]

    user_id, reason = extract_user_and_text(message, args)

    if not user_id:
        message.reply_text("‡∂î‡∂∂ ‡∂¥‡∂ª‡∑í‡∑Å‡∑ì‡∂Ω‡∂ö‡∂∫‡∑ô‡∂ö‡∑î ‡∑Ä‡∑ô‡∂≠ ‡∂∫‡∑ú‡∂∏‡∑î ‡∑Ä‡∂± ‡∂∂‡∑Ä‡∂ö‡∑ä ‡∂±‡∑ú‡∂¥‡∑ô‡∂±‡∑ö.")
        return ""

    try:
        member = chat.get_member(user_id)
    except BadRequest as excp:
        if excp.message == "‡∂¥‡∂ª‡∑í‡∑Å‡∑ì‡∂Ω‡∂ö‡∂∫‡∑è ‡∑Ñ‡∂∏‡∑î ‡∂±‡∑ú‡∑Ä‡∑ì‡∂∫":
            message.reply_text("‡∂∏‡∂ß ‡∂∏‡∑ô‡∂∏ ‡∂¥‡∂ª‡∑í‡∑Å‡∑ì‡∂Ω‡∂ö‡∂∫‡∑è ‡∑É‡∑ú‡∂∫‡∑è ‡∂ú‡∂≠ ‡∂±‡∑ú‡∑Ñ‡∑ê‡∂ö")
            return ""
        else:
            raise

    if is_user_admin(chat, user_id, member):
        message.reply_text("‡∂∏‡∂∏ ‡∂á‡∂≠‡∑ä‡∂≠‡∂ß‡∂∏ ‡∂¥‡∑ä‚Äç‡∂ª‡∑è‡∂ª‡∑ä‡∂Æ‡∂±‡∑è ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è ‡∂∏‡∂ß ‡∂¥‡∂ª‡∑í‡∂¥‡∑è‡∂Ω‡∂ö‡∂∫‡∑í‡∂±‡∑ä ‡∂±‡∑í‡∑Å‡∑ä‡∑Å‡∂∂‡∑ä‡∂Ø ‡∂ö‡∂ª‡∂±‡∑ä‡∂± ... ")
        return ""

    if user_id == bot.id:
        message.reply_text("‡∂∏‡∂∏ ‡∂≠‡∂±‡∑í‡∂∫‡∂∏ ‡∂±‡∑í‡∑Å‡∑ä‡∑Å‡∂∂‡∑ä‡∂Ø ‡∑Ä‡∑ô‡∂±‡∑ä‡∂±‡∑ô ‡∂±‡∑ë, ‡∂î‡∂∫‡∑è‡∂ß ‡∂¥‡∑í‡∑É‡∑ä‡∑É‡∑î‡∂Ø?")
        return ""

    if not reason:
        message.reply_text("‡∂∏‡∑ô‡∂∏ ‡∂¥‡∂ª‡∑í‡∑Å‡∑ì‡∂Ω‡∂ö‡∂∫‡∑è ‡∂±‡∑í‡∑Å‡∑ä‡∑Å‡∂∂‡∑ä‡∂Ø ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß ‡∂î‡∂∂ ‡∂ö‡∑è‡∂Ω‡∂∫‡∂ö‡∑ä ‡∂±‡∑í‡∂∫‡∂∏ ‡∂ö‡∂ª ‡∂±‡∑ê‡∂≠!")
        return ""

    split_reason = reason.split(None, 1)

    time_val = split_reason[0].lower()
    if len(split_reason) > 1:
        reason = split_reason[1]
    else:
        reason = ""

    mutetime = extract_time(message, time_val)

    if not mutetime:
        return ""

    log = "<b>{}:</b>" \
          "\n#TEMP MUTED" \
          "\n<b>Admin:</b> {}" \
          "\n<b>User:</b> {}" \
          "\n<b>Time:</b> {}".format(html.escape(chat.title), mention_html(user.id, user.first_name),
                                     mention_html(member.user.id, member.user.first_name), time_val)
    if reason:
        log += "\n<b>Reason:</b> {}".format(reason)

    try:
        if member.can_send_messages is None or member.can_send_messages:
            bot.restrict_chat_member(chat.id, user_id, until_date=mutetime, can_send_messages=False)
            message.reply_text("‡∂ö‡∂ß ‡∑Ä‡∑Ñ‡∂¥‡∂±‡∑ä! üò† ‡∂±‡∑í‡∑Å‡∑ä‡∑Å‡∂∂‡∑ä‡∂Ø ‡∂ö‡∂ª ‡∂á‡∂≠ {}!".format(time_val))
            return log
        else:
            message.reply_text("‡∂∏‡∑ô‡∂∏ ‡∂¥‡∂ª‡∑í‡∑Å‡∑ì‡∂Ω‡∂ö‡∂∫‡∑è ‡∂Ø‡∑ê‡∂±‡∂ß‡∂∏‡∂≠‡∑ä ‡∂±‡∑í‡∑Å‡∑ä‡∑Å‡∂∂‡∑ä‡∂Ø ‡∂ö‡∂ª ‡∂á‡∂≠.")

    except BadRequest as excp:
        if excp.message == "‡∂¥‡∑í‡∑Ö‡∑í‡∂≠‡∑î‡∂ª‡∑î ‡∂¥‡∂´‡∑í‡∑Ä‡∑í‡∂©‡∂∫ ‡∑Ñ‡∂∏‡∑î ‡∂±‡∑ú‡∑Ä‡∑ì‡∂∫":
            # Do not reply
            message.reply_text("‡∂ö‡∂ß ‡∑Ä‡∑Ñ‡∂¥‡∂±‡∑ä! üò† ‡∂±‡∑í‡∑Å‡∑ä‡∑Å‡∂∂‡∑ä‡∂Ø ‡∂ö‡∂ª ‡∂á‡∂≠ {}!".format(time_val), quote=False)
            return log
        else:
            LOGGER.warning(update)
            LOGGER.exception("‡∂Ø‡∑ù‡∑Ç ‡∂±‡∑í‡∑Å‡∑ä‡∑Å‡∂∂‡∑ä‡∂Ø ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏ user %s in chat %s (%s) due to %s", user_id, chat.title, chat.id,
                             excp.message)
            message.reply_text("‡∑Ñ‡∑ú‡∂≥‡∂∫‡∑í, ‡∂∏‡∂ß ‡∂ë‡∂∏ ‡∂¥‡∂ª‡∑í‡∑Å‡∑ì‡∂Ω‡∂ö‡∂∫‡∑è ‡∂±‡∑í‡∑Å‡∑ä‡∑Å‡∂∂‡∑ä‡∂Ø ‡∂ö‡∑Ö ‡∂±‡∑ú‡∑Ñ‡∑ê‡∂ö.")

    return ""


__help__ = """
*‡∂¥‡∂ª‡∑í‡∂¥‡∑è‡∂Ω‡∂ö ‡∂¥‡∂∏‡∂´‡∑í:*
 - /mute <userhandle>: ‡∂¥‡∂ª‡∑í‡∑Å‡∑ì‡∂Ω‡∂ö‡∂∫‡∑ô‡∂ö‡∑î ‡∂±‡∑í‡∑Ñ ces ‡∂ö‡∂ª‡∂∫‡∑í. ‡∂¥‡∑í‡∑Ö‡∑í‡∂≠‡∑î‡∂ª‡∂ö‡∑ä ‡∂Ω‡∑ô‡∑É ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∑Ö ‡∑Ñ‡∑ê‡∂ö‡∑í‡∂∫, ‡∂¥‡∑í‡∑Ö‡∑í‡∂≠‡∑î‡∂ª‡∑î ‡∂¥‡∂ª‡∑í‡∑Å‡∑ì‡∂Ω‡∂ö‡∂∫‡∑è‡∂ß ‡∂±‡∑í‡∑Å‡∑ä‡∑Å‡∂∂‡∑ä‡∂Ø ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏.
 - /tmute <userhandle> x(m/h/d): mx ‡∂ö‡∑è‡∂Ω‡∂∫ ‡∑É‡∂≥‡∑Ñ‡∑è ‡∂¥‡∂ª‡∑í‡∑Å‡∑ì‡∂Ω‡∂ö‡∂∫‡∑ô‡∂ö‡∑î ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∂ª‡∂∫‡∑í. (‡∑Ñ‡∑É‡∑î‡∂ª‡∑î‡∑Ä ‡∑Ñ‡∂ª‡∑Ñ‡∑è ‡∑Ñ‡∑ù ‡∂¥‡∑í‡∑Ö‡∑í‡∂≠‡∑î‡∂ª‡∑î ‡∂Ø‡∑ô‡∂±‡∑ä‡∂±). m = minutes, h = hours, d = days.
 - /unmute <userhandle>: ‡∂¥‡∂ª‡∑í‡∑Å‡∑ì‡∂Ω‡∂ö‡∂∫‡∑ô‡∂ö‡∑î ‡∂â‡∑Ä‡∂≠‡∑ä ‡∂ö‡∂ª‡∂∫‡∑í. ‡∂¥‡∑í‡∑Ö‡∑í‡∂≠‡∑î‡∂ª‡∂ö‡∑ä ‡∂Ω‡∑ô‡∑É ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∑Ö ‡∑Ñ‡∑ê‡∂ö‡∑í‡∂∫, ‡∂¥‡∑í‡∑Ö‡∑í‡∂≠‡∑î‡∂ª‡∑î ‡∂¥‡∂ª‡∑í‡∑Å‡∑ì‡∂Ω‡∂ö‡∂∫‡∑è‡∂ß ‡∂±‡∑í‡∑Å‡∑ä‡∑Å‡∂∂‡∑ä‡∂Ø ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏.
"""

__mod_name__ = "Mute"

MUTE_HANDLER = CommandHandler("mute", mute, pass_args=True, filters=Filters.group)
UNMUTE_HANDLER = CommandHandler("unmute", unmute, pass_args=True, filters=Filters.group)
TEMPMUTE_HANDLER = CommandHandler(["tmute", "tempmute"], temp_mute, pass_args=True, filters=Filters.group)

dispatcher.add_handler(MUTE_HANDLER)
dispatcher.add_handler(UNMUTE_HANDLER)
dispatcher.add_handler(TEMPMUTE_HANDLER)
