from typing import Optional, List

from telegram import ParseMode
from telegram import Message, Chat, Update, Bot, User
from telegram.error import BadRequest
from telegram.ext import CommandHandler, Filters
from telegram.ext.dispatcher import run_async
from telegram.utils.helpers import mention_html

import tg_bot.modules.sql.connection_sql as sql
from tg_bot import dispatcher, LOGGER, SUDO_USERS
from tg_bot.modules.helper_funcs.chat_status import bot_admin, user_admin, is_user_admin, can_restrict
from tg_bot.modules.helper_funcs.extraction import extract_user, extract_user_and_text
from tg_bot.modules.helper_funcs.string_handling import extract_time

# from tg_bot.modules.translations.strings import tld

from tg_bot.modules.keyboard import keyboard

@user_admin
@run_async
def allow_connections(bot: Bot, update: Update, args: List[str]) -> str:
    chat = update.effective_chat  # type: Optional[Chat]
    if chat.type != chat.PRIVATE:
        if len(args) >= 1:
            var = args[0]
            print(var)
            if (var == "no"):
                sql.set_allow_connect_to_chat(chat.id, False)
                update.effective_message.reply_text("‡∂¥‡∂ª‡∑í‡∑Å‡∑ì‡∂Ω‡∂ö‡∂∫‡∑í‡∂±‡∑ä ‡∑É‡∂≥‡∑Ñ‡∑è ‡∂∏‡∑ô‡∂∏ ‡∂ö‡∂≠‡∑è‡∂∂‡∑Ñ‡∂ß ‡∂Ö‡∂ö‡∑ä‚Äç‡∂ª‡∑ì‡∂∫ ‡∑É‡∂∏‡∑ä‡∂∂‡∂±‡∑ä‡∂∞‡∂≠‡∑è")
            elif(var == "yes"):
                sql.set_allow_connect_to_chat(chat.id, True)
                update.effective_message.reply_text("‡∂¥‡∂ª‡∑í‡∑Å‡∑ì‡∂Ω‡∂ö‡∂∫‡∑í‡∂±‡∑ä ‡∑É‡∂≥‡∑Ñ‡∑è ‡∂∏‡∑ô‡∂∏ ‡∂ö‡∂≠‡∑è‡∂∂‡∑É‡∑ä ‡∑Ä‡∑ô‡∂≠ ‡∑É‡∂∏‡∑ä‡∂∂‡∂±‡∑ä‡∂∞‡∂≠‡∑è ‡∑É‡∂∂‡∂Ω ‡∂ö‡∂ª ‡∂á‡∂≠")
            else:
                update.effective_message.reply_text("‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂á‡∂≠‡∑î‡∂Ω‡∂≠‡∑ä ‡∂ö‡∂ª‡∂±‡∑ä‡∂± on/yes/off/no ‡∂ö‡∂´‡∑ä‡∂©‡∑è‡∂∫‡∂∏‡∑ö!")
        else:
            update.effective_message.reply_text("‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂á‡∂≠‡∑î‡∂Ω‡∂≠‡∑ä ‡∂ö‡∂ª‡∂±‡∑ä‡∂± on/yes/off/no ‡∂ö‡∂´‡∑ä‡∂©‡∑è‡∂∫‡∂∏‡∑ö!")
    else:
        update.effective_message.reply_text("‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂á‡∂≠‡∑î‡∂Ω‡∂≠‡∑ä ‡∂ö‡∂ª‡∂±‡∑ä‡∂± on/yes/off/no ‡∂ö‡∂´‡∑ä‡∂©‡∑è‡∂∫‡∂∏‡∑ö!")


@run_async
def connect_chat(bot, update, args):
    chat = update.effective_chat  # type: Optional[Chat]
    user = update.effective_user  # type: Optional[User]
    if update.effective_chat.type == 'private':
        if len(args) >= 1:
            try:
                connect_chat = int(args[0])
            except ValueError:
                update.effective_message.reply_text("‡∂Ö‡∑Ä‡∂Ω‡∂Ç‡∂ú‡∑î ‡∂†‡∑ê‡∂ß‡∑ä ‡∑Ñ‡∑ê‡∂≥‡∑î‡∂±‡∑î‡∂∏‡∑ä‡∂¥‡∂≠ ‡∂Ω‡∂∂‡∑è ‡∂Ø‡∑ì ‡∂á‡∂≠!")
            if (bot.get_chat_member(connect_chat, update.effective_message.from_user.id).status in ('administrator', 'creator') or 
                                     (sql.allow_connect_to_chat(connect_chat) == True) and 
                                     bot.get_chat_member(connect_chat, update.effective_message.from_user.id).status in ('member')) or (
                                     user.id in SUDO_USERS):

                connection_status = sql.connect(update.effective_message.from_user.id, connect_chat)
                if connection_status:
                    chat_name = dispatcher.bot.getChat(connected(bot, update, chat, user.id, need_admin=False)).title
                    update.effective_message.reply_text("‡∑É‡∂∏‡∂ü ‡∑É‡∑è‡∂ª‡∑ä‡∂Æ‡∂ö‡∑Ä ‡∑É‡∂∏‡∑ä‡∂∂‡∂±‡∑ä‡∂∞ ‡∑Ä‡∑ì ‡∂á‡∂≠*{}*".format(chat_name), parse_mode=ParseMode.MARKDOWN)

                    #Add chat to connection history
                    history = sql.get_history(user.id)
                    if history:
                        #Vars
                        if history.chat_id1:
                            history1 = int(history.chat_id1)
                        if history.chat_id2:
                            history2 = int(history.chat_id2)
                        if history.chat_id3:
                            history3 = int(history.chat_id3)
                        if history.updated:
                            number = history.updated

                        if number == 1 and connect_chat != history2 and connect_chat != history3:
                            history1 = connect_chat
                            number = 2
                        elif number == 2 and connect_chat != history1 and connect_chat != history3:
                            history2 = connect_chat
                            number = 3
                        elif number >= 3 and connect_chat != history2 and connect_chat != history1:
                            history3 = connect_chat
                            number = 1
                        else:
                            print("Error")
                    
                        print(history.updated)
                        print(number)

                        sql.add_history(user.id, history1, history2, history3, number)
                        print(history.user_id, history.chat_id1, history.chat_id2, history.chat_id3, history.updated)
                    else:
                        sql.add_history(user.id, connect_chat, "0", "0", 2)
                    #Rebuild user's keyboard
                    keyboard(bot, update)
                    
                else:
                    update.effective_message.reply_text("‡∑É‡∂∏‡∑ä‡∂∂‡∂±‡∑ä‡∂∞‡∂≠‡∑è‡∑Ä‡∂∫ ‡∂Ö‡∑É‡∑è‡∂ª‡∑ä‡∂Æ‡∂ö ‡∑Ä‡∑í‡∂∫!")
            else:
                update.effective_message.reply_text("‡∂∏‡∑ô‡∂∏ ‡∂ö‡∂≠‡∑è‡∂∂‡∑Ñ‡∂ß ‡∑É‡∂∏‡∑ä‡∂∂‡∂±‡∑ä‡∂∞ ‡∑Ä‡∑ì‡∂∏‡∂ß ‡∂Ö‡∑Ä‡∑É‡∂ª ‡∂±‡∑ê‡∂≠!")
        else:
            update.effective_message.reply_text("‡∑É‡∂∏‡∑ä‡∂∂‡∂±‡∑ä‡∂∞ ‡∑Ä‡∑ì‡∂∏‡∂ß ‡∂†‡∑ê‡∂ß‡∑ä ‡∑Ñ‡∑ê‡∂≥‡∑î‡∂±‡∑î‡∂∏‡∑ä‡∂¥‡∂≠ ‡∂á‡∂≠‡∑î‡∑Ö‡∂≠‡∑ä ‡∂ö‡∂ª‡∂±‡∑ä‡∂±!")
            history = sql.get_history(user.id)
            print(history.user_id, history.chat_id1, history.chat_id2, history.chat_id3, history.updated)

    else:
        update.effective_message.reply_text("‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∂∫ PM ‡∑Ä‡∂Ω‡∂ß ‡∂¥‡∂∏‡∂´‡∂ö‡∑ä ‡∑É‡∑ì‡∂∏‡∑è ‡∑Ä‡∑ö!")


def disconnect_chat(bot, update):
    if update.effective_chat.type == 'private':
        disconnection_status = sql.disconnect(update.effective_message.from_user.id)
        if disconnection_status:
            sql.disconnected_chat = update.effective_message.reply_text("‡∂ö‡∂≠‡∑è‡∂∂‡∑É‡∑ä ‡∑Ä‡∂Ω‡∑í‡∂±‡∑ä ‡∑Ä‡∑í‡∑É‡∂±‡∑ä‡∂∞‡∑í ‡∑Ä‡∑í‡∂∫!")
            #Rebuild user's keyboard
            keyboard(bot, update)
        else:
           update.effective_message.reply_text("‡∑Ä‡∑í‡∑É‡∂±‡∑ä‡∂∞‡∑í ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏ ‡∂Ö‡∑É‡∑è‡∂ª‡∑ä‡∂Æ‡∂ö‡∂∫‡∑í!")
    else:
        update.effective_message.reply_text("‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∂∫ PM ‡∑Ä‡∂Ω‡∂ß ‡∂¥‡∂∏‡∂´‡∂ö‡∑ä ‡∑É‡∑ì‡∂∏‡∑è ‡∑Ä‡∑ö")


def connected(bot, update, chat, user_id, need_admin=True):
    if chat.type == chat.PRIVATE and sql.get_connected_chat(user_id):
        conn_id = sql.get_connected_chat(user_id).chat_id
        if (bot.get_chat_member(conn_id, user_id).status in ('administrator', 'creator') or 
                                     (sql.allow_connect_to_chat(connect_chat) == True) and 
                                     bot.get_chat_member(user_id, update.effective_message.from_user.id).status in ('member')) or (
                                     user_id in SUDO_USERS):
            if need_admin == True:
                if bot.get_chat_member(conn_id, update.effective_message.from_user.id).status in ('administrator', 'creator') or user_id in SUDO_USERS:
                    return conn_id
                else:
                    update.effective_message.reply_text("‡∂î‡∂∂ ‡∑É‡∂∏‡∑ä‡∂∂‡∂±‡∑ä‡∂∞‡∑í‡∂≠ ‡∂ö‡∂´‡∑ä‡∂©‡∑è‡∂∫‡∂∏‡∂ö ‡∂¥‡∂ª‡∑í‡∂¥‡∑è‡∂Ω‡∂ö‡∂∫‡∑ô‡∂ö‡∑î ‡∑Ä‡∑í‡∂∫ ‡∂∫‡∑î‡∂≠‡∑î‡∂∫!")
                    exit(1)
            else:
                return conn_id
        else:
            update.effective_message.reply_text("‡∂ö‡∂´‡∑ä‡∂©‡∑è‡∂∫‡∂∏‡∑ä ‡∂Ö‡∂∫‡∑í‡∂≠‡∑í‡∑Ä‡∑è‡∑É‡∑í‡∂ö‡∂∏‡∑ä ‡∑É‡∂∏‡∑ä‡∂∂‡∂±‡∑ä‡∂∞‡∂≠‡∑è‡∑Ä‡∂∫ ‡∑Ä‡∑ô‡∂±‡∑É‡∑ä ‡∂ö‡∂ª ‡∑Ñ‡∑ù ‡∂î‡∂∂ ‡∂≠‡∑Ä‡∂Ø‡∑î‡∂ª‡∂ß‡∂≠‡∑ä ‡∂¥‡∂ª‡∑í‡∂¥‡∑è‡∂Ω‡∂ö ‡∂±‡∑ú‡∑Ä‡∑ö.\n‡∂∏‡∂∏ ‡∂î‡∂∂‡∑Ä ‡∑Ä‡∑í‡∑É‡∂±‡∑ä‡∂∞‡∑í ‡∂ö‡∂ª‡∂±‡∑ä‡∂±‡∂∏‡∑ä.")
            disconnect_chat(bot, update)
            exit(1)
    else:
        return False



__help__ = """
üî∞*‡∑É‡∂∏‡∑ä‡∂∂‡∂±‡∑ä‡∂∞‡∑í‡∂≠ ‡∂ö‡∂´‡∑ä‡∂©‡∑è‡∂∫‡∂∏‡∑ä ‡∑É‡∂∏‡∂ü ‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∑è ‡∂Ω‡∂∂‡∑è ‡∂ú‡∂≠ ‡∑Ñ‡∑ê‡∂ö‡∑í‡∂∫*:
 üîÖ ‡∑É‡∂ß‡∑Ñ‡∂±‡∑ä ‡∂∂‡∂Ω‡∂±‡∑ä‡∂± ‡∑É‡∑Ñ ‡∑É‡∂Ç‡∑É‡∑ä‡∂ö‡∂ª‡∂´‡∂∫ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±
 üîÖ ‡∂¥‡∑ô‡∂ª‡∑Ñ‡∂±‡∑ä ‡∂∂‡∂Ω‡∂±‡∑ä‡∂± ‡∑É‡∑Ñ ‡∑É‡∂Ç‡∑É‡∑ä‡∂ö‡∂ª‡∂´‡∂∫ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±
 üîÖ ‡∂Ö‡∂±‡∑è‡∂ú‡∂≠‡∂∫‡∑ö‡∂Ø‡∑ì ‡∂≠‡∑Ä‡∂≠‡∑ä!

 - /connect <chatid>: ‡∂Ø‡∑î‡∂ª‡∑É‡∑ä‡∂Æ ‡∂ö‡∂≠‡∑è‡∂∂‡∑É‡∑ä ‡∑Ä‡∑ô‡∂≠ ‡∑É‡∂∏‡∑ä‡∂∂‡∂±‡∑ä‡∂∞ ‡∑Ä‡∂±‡∑ä‡∂±
 - /disconnect: ‡∂ö‡∂≠‡∑è‡∂∂‡∑É‡∑ä ‡∑Ä‡∂Ω‡∑í‡∂±‡∑ä ‡∑Ä‡∑í‡∑É‡∂±‡∑ä‡∂∞‡∑í ‡∂ö‡∂ª‡∂±‡∑ä‡∂±
 - /allowconnect on/yes/off/no: ‡∂ö‡∂´‡∑ä‡∂©‡∑è‡∂∫‡∂∏‡∑ä ‡∑Ä‡∂Ω‡∂ß ‡∑É‡∂∏‡∑ä‡∂∂‡∂±‡∑ä‡∂∞ ‡∑Ä‡∑ì‡∂∏‡∂ß ‡∂¥‡∂ª‡∑í‡∑Å‡∑ì‡∂Ω‡∂ö‡∂∫‡∑í‡∂±‡∑ä‡∂ß ‡∂â‡∂© ‡∂Ø‡∑ô‡∂±‡∑ä‡∂±
"""

__mod_name__ = "Connections"

CONNECT_CHAT_HANDLER = CommandHandler("connect", connect_chat, allow_edited=True, pass_args=True)
DISCONNECT_CHAT_HANDLER = CommandHandler("disconnect", disconnect_chat, allow_edited=True)
ALLOW_CONNECTIONS_HANDLER = CommandHandler("allowconnect", allow_connections, allow_edited=True, pass_args=True)

dispatcher.add_handler(CONNECT_CHAT_HANDLER)
dispatcher.add_handler(DISCONNECT_CHAT_HANDLER)
dispatcher.add_handler(ALLOW_CONNECTIONS_HANDLER)
