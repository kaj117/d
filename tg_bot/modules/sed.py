
import re
import sre_constants

import telegram
from telegram import Update, Bot
from telegram.ext import run_async

from tg_bot import dispatcher, LOGGER
from tg_bot.modules.disable import DisableAbleRegexHandler

DELIMITERS = ("/", ":", "|", "_")


def separate_sed(sed_string):
    if len(sed_string) >= 3 and sed_string[1] in DELIMITERS and sed_string.count(sed_string[1]) >= 2:
        delim = sed_string[1]
        start = counter = 2
        while counter < len(sed_string):
            if sed_string[counter] == "\\":
                counter += 1

            elif sed_string[counter] == delim:
                replace = sed_string[start:counter]
                counter += 1
                start = counter
                break

            counter += 1

        else:
            return None

        while counter < len(sed_string):
            if sed_string[counter] == "\\" and counter + 1 < len(sed_string) and sed_string[counter + 1] == delim:
                sed_string = sed_string[:counter] + sed_string[counter + 1:]

            elif sed_string[counter] == delim:
                replace_with = sed_string[start:counter]
                counter += 1
                break

            counter += 1
        else:
            return replace, sed_string[start:], ""

        flags = ""
        if counter < len(sed_string):
            flags = sed_string[counter:]
        return replace, replace_with, flags.lower()


@run_async
def sed(bot: Bot, update: Update):
    sed_result = separate_sed(update.effective_message.text)
    if sed_result and update.effective_message.reply_to_message:
        if update.effective_message.reply_to_message.text:
            to_fix = update.effective_message.reply_to_message.text
        elif update.effective_message.reply_to_message.caption:
            to_fix = update.effective_message.reply_to_message.caption
        else:
            return

        repl, repl_with, flags = sed_result

        if not repl:
            update.effective_message.reply_to_message.reply_text("‡∂î‡∂∂ ‡∂Ü‡∂Ø‡∑ö‡∑Å ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß ‡∂ã‡∂≠‡∑ä‡∑É‡∑è‡∑Ñ ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è ..."
                                                                 "‡∂∫‡∂∏‡∂ö‡∑ä ‡∑É‡∂∏‡∂ü ‡∂ö‡∑í‡∑É‡∑í‡∑Ä‡∂ö‡∑ä ‡∂±‡∑ê‡∂Ø‡∑ä‡∂Ø?")
            return

        try:
            check = re.match(repl, to_fix, flags=re.IGNORECASE)

            if check and check.group(0).lower() == to_fix.lower():
                update.effective_message.reply_to_message.reply_text("üôè‡∂Ü‡∂∫‡∑î‡∂∂‡∑ù‡∑Ä‡∂±‡∑äüôè ‡∑Ñ‡∑ê‡∂∏‡∑ù‡∂ß‡∂∏, {} ‡∑Ñ‡∂Ø‡∂±‡∑ä‡∂± ‡∂ã‡∂≠‡∑ä‡∑É‡∑è‡∑Ñ ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è "
                                                                     "‡∂∏‡∂∏ ‡∂ö‡∑í‡∂∫‡∂±‡∑ä‡∂±‡∑ö ‡∂∏‡∂ß ‡∂Ö‡∑Ä‡∑Å‡∑ä‚Äç‡∂∫ ‡∂±‡∑ê‡∂≠‡∑í ‡∂Ø‡∑ö‡∑Ä‡∂Ω‡∑ä "
                                                                     "‡∂ö‡∑í‡∂∫‡∂±‡∑ä‡∂±!".format(update.effective_user.first_name))
                return

            if 'i' in flags and 'g' in flags:
                text = re.sub(repl, repl_with, to_fix, flags=re.I).strip()
            elif 'i' in flags:
                text = re.sub(repl, repl_with, to_fix, count=1, flags=re.I).strip()
            elif 'g' in flags:
                text = re.sub(repl, repl_with, to_fix).strip()
            else:
                text = re.sub(repl, repl_with, to_fix, count=1).strip()
        except sre_constants.error:
            LOGGER.warning(update.effective_message.text)
            LOGGER.exception("SRE ‡∂±‡∑í‡∂∫‡∂≠ ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑í")
            update.effective_message.reply_text("‡∂î‡∂∂ ‡∂¥‡∑Ä‡∑è ‡∂¥‡∑ú‡∑Ö‡∂π‡∑Ä‡∂±‡∑Ä‡∑è‡∂Ø? ‡∂¥‡∑ô‡∂±‡∑ô‡∂± ‡∑Ä‡∑í‡∂Ø‡∑í‡∑Ñ‡∂ß ‡∂±‡∑ê‡∑Ñ‡∑ê.")
            return

        # empty string errors -_-
        if len(text) >= telegram.MAX_MESSAGE_LENGTH:
            update.effective_message.reply_text("Sed ‡∑Ä‡∑í‡∂∞‡∑è‡∂±‡∂∫‡∑ö \result ‡∂Ω‡∂∫ ‡∂∂‡∑ú‡∑Ñ‡∑ù ‡∂Ø‡∑í‡∂ú‡∑î ‡∑Ä‡∑í‡∂∫\
                                                 telegram!")
        elif text:
            update.effective_message.reply_to_message.reply_text(text)


__help__ = """
 - s/<text1>/<text2>(/<flag>): ‡∂∏‡∑ö ‡∑É‡∑í‡∂∫‡∂Ω‡∑ä‡∂Ω ‡∑É‡∂∏‡∂ü ‡∂¥‡∑ä‚Äç‡∂ª‡∂≠‡∑í‡∑É‡∑ä‡∂Æ‡∑è‡∂¥‡∂±‡∂∫ ‡∂ö‡∂ª‡∂∏‡∑í‡∂±‡∑ä ‡∂ë‡∂∏ ‡∂¥‡∂´‡∑í‡∑Ä‡∑î‡∂©‡∂∫ ‡∂∏‡∂≠ ‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∑è‡∂ö‡∑è‡∂ª‡∑ì ‡∂∏‡∑ô‡∑Ñ‡∑ô‡∂∫‡∑î‡∂∏‡∂ö‡∑ä ‡∑É‡∑í‡∂Ø‡∑î ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏ ‡∑É‡∂≥‡∑Ñ‡∑è ‡∂¥‡∂´‡∑í‡∑Ä‡∑í‡∂©‡∂∫‡∂ö‡∑ä ‡∑Ä‡∑ô‡∂≠ ‡∂¥‡∑í‡∑Ö‡∑í‡∂≠‡∑î‡∂ª‡∑î ‡∂Ø‡∑ô‡∂±‡∑ä‡∂± \
occurrences of 'text1' with 'text2'. Flags are optional, and currently include 'i' for ignore case, 'g' for global, \
or nothing. Delimiters include `/`, `_`, `|`, and `:`. T‡∂¥‡∑ô‡∑Ö ‡∑É‡∂∏‡∑ñ‡∑Ñ‡∂ö‡∂ª‡∂´‡∂∫‡∂ß ‡∑É‡∑Ñ‡∂∫ ‡∂Ø‡∂ö‡∑ä‡∑Ä‡∂∫‡∑í. ‡∂ë‡∑Ñ‡∑í ‡∂¥‡∑ä‚Äç‡∂ª‡∂≠‡∑í message ‡∂Ω‡∂∫‡∂ö‡∑ä ‡∑Ä‡∑Å‡∂∫‡∑ô‡∂±‡∑ä ‡∂Ω‡∑ê‡∂∂‡∑ô‡∂± ‡∂¥‡∂´‡∑í‡∑Ä‡∑í‡∂©‡∂∫ ‡∑Ä‡∑í‡∂∫ ‡∂±‡∑ú‡∑Ñ‡∑ê‡∂ö \
‡∑Ä‡∂©‡∑è ‡∑Ä‡∑í‡∑Å‡∑è‡∂Ω‡∂∫‡∑í {}.
*‡∑É‡∑ê.‡∂∫‡∑î :* ‡∂ú‡∑ê‡∂Ω‡∂¥‡∑ì‡∂∏ ‡∂¥‡∑Ñ‡∑É‡∑î ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏ ‡∑É‡∂≥‡∑Ñ‡∑è ‡∑É‡∑ô‡∂©‡∑ä ‡∑Ä‡∑í‡∑Å‡∑ö‡∑Ç ‡∂Ö‡∂ö‡∑ä‡∑Ç‡∂ª ‡∂ö‡∑í‡∑Ñ‡∑í‡∂¥‡∂∫‡∂ö‡∑ä ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∂ª‡∂∫‡∑í, ‡∂í‡∑Ä‡∑è ‡∑Ä‡∑ê‡∂±‡∑í: `+*.?\\`
‡∂î‡∂∂‡∂ß ‡∂∏‡∑ô‡∂∏ ‡∂Ö‡∂ö‡∑ä‡∑Ç‡∂ª ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß ‡∂Ö‡∑Ä‡∑Å‡∑ä‚Äç‡∂∫ ‡∂±‡∂∏‡∑ä, ‡∂î‡∂∂ ‡∂í‡∑Ä‡∑è‡∂∫‡∑í‡∂±‡∑ä ‡∂ú‡∑ê‡∂Ω‡∑Ä‡∑ì‡∂∏‡∂ß ‡∑Ä‡∂ú ‡∂∂‡∂Ω‡∑è ‡∂ú‡∂±‡∑ä‡∂±!
eg: \\?.
""".format(telegram.MAX_MESSAGE_LENGTH)

__mod_name__ = "Sed/Regex"


SED_HANDLER = DisableAbleRegexHandler(r's([{}]).*?\1.*'.format("".join(DELIMITERS)), sed, friendly="sed")

dispatcher.add_handler(SED_HANDLER)
