import html
from io import BytesIO
from typing import Optional, List

from telegram import Message, Update, Bot, User, Chat
from telegram.error import BadRequest, TelegramError
from telegram.ext import run_async, CommandHandler, MessageHandler, Filters
from telegram.utils.helpers import mention_html

import tg_bot.modules.sql.global_mutes_sql as sql
from tg_bot import dispatcher, OWNER_ID, SUDO_USERS, SUPPORT_USERS, STRICT_GMUTE
from tg_bot.modules.helper_funcs.chat_status import user_admin, is_user_admin
from tg_bot.modules.helper_funcs.extraction import extract_user, extract_user_and_text
from tg_bot.modules.helper_funcs.filters import CustomFilters
from tg_bot.modules.helper_funcs.misc import send_to_list
from tg_bot.modules.sql.users_sql import get_all_chats

GMUTE_ENFORCE_GROUP = 6


@run_async
def gmute(bot: Bot, update: Update, args: List[str]):
    message = update.effective_message  # type: Optional[Message]

    user_id, reason = extract_user_and_text(message, args)

    if not user_id:
        message.reply_text("‡∂î‡∂∂ ‡∂¥‡∂ª‡∑í‡∑Å‡∑ì‡∂Ω‡∂ö‡∂∫‡∑ô‡∂ö‡∑î ‡∑Ä‡∑ô‡∂≠ ‡∂∫‡∑ú‡∂∏‡∑î ‡∑Ä‡∂± ‡∂∂‡∑Ä‡∂ö‡∑ä ‡∂±‡∑ú‡∂¥‡∑ô‡∂±‡∑ö.")
        return

    if int(user_id) in SUDO_USERS:
        message.reply_text("‡∂∏‡∂∏ ‡∂î‡∂≠‡∑ä‡∂≠‡∑î ‡∂∂‡∑ê‡∂Ω‡∑î‡∑Ä‡∑ô‡∂∏‡∑í, ‡∂∏‡∂ú‡∑ö ‡∂ö‡∑î‡∂©‡∑è ‡∂á‡∑É‡∑ô‡∂±‡∑ä ... ‡∑É‡∑î‡∂©‡∑ù ‡∂¥‡∂ª‡∑í‡∑Å‡∑ì‡∂Ω‡∂ö ‡∂∫‡∑î‡∂Ø‡∑ä‡∂∞‡∂∫‡∂ö‡∑ä! ‡∂á‡∂∫‡∑í ‡∂î‡∂∫‡∑è‡∂Ω‡∑è ‡∂ë‡∂ö‡∑í‡∂±‡∑ô‡∂ö‡∑è‡∂ß ‡∑Ñ‡∂ª‡∑Ä‡∂±‡∑ä‡∂±‡∑ö?")
        return

    if int(user_id) in SUPPORT_USERS:
        message.reply_text("OOOH ‡∂∫‡∂∏‡∑ô‡∂ö‡∑ä ‡∂Ü‡∂∞‡∑è‡∂ª‡∂ö ‡∂¥‡∂ª‡∑í‡∑Å‡∑ì‡∂Ω‡∂ö‡∂∫‡∑ô‡∂ö‡∑î ‡∂∏‡∑ê‡∂©‡∂¥‡∑ê‡∑Ä‡∑ê‡∂≠‡∑ä‡∑Ä‡∑ì‡∂∏‡∂ß ‡∂ã‡∂≠‡∑ä‡∑É‡∑è‡∑Ñ ‡∂ö‡∂ª‡∂∫‡∑í! *‡∂¥‡∑ú‡∂¥‡∑ä‡∂ö‡∑ù‡∂±‡∑ä ‡∂Ö‡∂Ω‡∑ä‡∂Ω‡∑è ‡∂ú‡∂±‡∑ìüòéüòé*")
        return

    if user_id == bot.id:
        message.reply_text("-_- ‡∑Ñ‡∂ª‡∑í‡∂∏ ‡∑Ä‡∑í‡∑Ñ‡∑í‡∂Ω‡∑î‡∂∫‡∑í, ‡∂á‡∂∫‡∑í ‡∂∏‡∂∏ ‡∂±‡∑ê‡∂≠‡∑ä‡∂≠‡∑ö? ‡∑Ñ‡∑ú‡∂≥‡∂∫‡∑í ‡∂ã‡∂≠‡∑ä‡∑É‡∑è‡∑Ñ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.")
        return

    try:
        user_chat = bot.get_chat(user_id)
    except BadRequest as excp:
        message.reply_text(excp.message)
        return

    if user_chat.type != 'private':
        message.reply_text("That's not a user!")
        return

    if sql.is_user_gmuted(user_id):
        if not reason:
            message.reply_text("‡∂∏‡∑ô‡∂∏ ‡∂¥‡∂ª‡∑í‡∑Å‡∑ì‡∂Ω‡∂ö‡∂∫‡∑è ‡∂Ø‡∑ê‡∂±‡∂ß‡∂∏‡∂≠‡∑ä gmuted; ‡∂∏‡∂∏ ‡∑Ñ‡∑ö‡∂≠‡∑î‡∑Ä ‡∑Ä‡∑ô‡∂±‡∑É‡∑ä ‡∂ö‡∂ª‡∂±‡∑ä‡∂±‡∂∏‡∑ä, ‡∂±‡∂∏‡∑î‡∂≠‡∑ä ‡∂î‡∂∂ ‡∂∏‡∂ß ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂Ø‡∑î‡∂±‡∑ä‡∂±‡∑ö ‡∂±‡∑ê‡∑Ñ‡∑ê ...ü•∫ü•∫")
            return

        success = sql.update_gmute_reason(user_id, user_chat.username or user_chat.first_name, reason)
        if success:
            message.reply_text("‡∂∏‡∑ô‡∂∏ ‡∂¥‡∂ª‡∑í‡∑Å‡∑ì‡∂Ω‡∂ö‡∂∫‡∑è ‡∂Ø‡∑ê‡∂±‡∂ß‡∂∏‡∂≠‡∑ä gmuted; ‡∂∏‡∂∏ ‡∂ú‡∑ú‡∑É‡∑ä gmute ‡∑Ñ‡∑ö‡∂≠‡∑î‡∑Ä ‡∂∫‡∑è‡∑Ä‡∂≠‡∑ä‡∂ö‡∑è‡∂Ω‡∑ì‡∂± ‡∂ö‡∂ª ‡∂á‡∂≠!")
        else:
            message.reply_text("‡∂±‡∑ê‡∑Ä‡∂≠ ‡∂ã‡∂≠‡∑ä‡∑É‡∑è‡∑Ñ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß ‡∂î‡∂∂‡∂ß ‡∂Ö‡∑Ä‡∑Å‡∑ä‚Äç‡∂∫‡∂Ø? ‡∂∏‡∂∏ ‡∑Ñ‡∑í‡∂≠‡∑î‡∑Ä‡∑ö ‡∂∏‡∑ö ‡∂¥‡∑î‡∂Ø‡∑ä‡∂ú‡∂Ω‡∂∫‡∑è gmuted ‡∂á‡∂≠‡∑í, ‡∂±‡∂∏‡∑î‡∂≠‡∑ä ‡∂¥‡∑É‡∑î‡∑Ä ‡∂î‡∑Ä‡∑î‡∂±‡∑ä ‡∂ë‡∑É‡∑ö ‡∂±‡∑ú‡∑Ä‡∑ö? "
                               "Am very confused")

        return

    message.reply_text("*‡∂©‡∂ö‡∑ä ‡∂ß‡∑ö‡∂¥‡∑ä ‡∑É‡∑ñ‡∂Ø‡∑è‡∂±‡∂∏‡∑ä* üòâ")

    muter = update.effective_user  # type: Optional[User]
    send_to_list(bot, SUDO_USERS + SUPPORT_USERS,
                 "{} is gmuting user {} "
                 "because:\n{}".format(mention_html(muter.id, muter.first_name),
                                       mention_html(user_chat.id, user_chat.first_name), reason or "‡∂ö‡∑í‡∑É‡∑í‡∂Ø‡∑î ‡∑Ñ‡∑ö‡∂≠‡∑î‡∑Ä‡∂ö‡∑ä ‡∂Ø‡∂ö‡∑ä‡∑Ä‡∑è ‡∂±‡∑ê‡∂≠"),
                 html=True)

    sql.gmute_user(user_id, user_chat.username or user_chat.first_name, reason)

    chats = get_all_chats()
    for chat in chats:
        chat_id = chat.chat_id

        # Check if this group has disabled gmutes
        if not sql.does_chat_gmute(chat_id):
            continue

        try:
            bot.restrict_chat_member(chat_id, user_id, can_send_messages=False)
        except BadRequest as excp:
            if excp.message == "‡∂¥‡∂ª‡∑í‡∑Å‡∑ì‡∂Ω‡∂ö‡∂∫‡∑è ‡∂†‡∑ê‡∂ß‡∑ä ‡∑Ñ‡∑í ‡∂¥‡∂ª‡∑í‡∂¥‡∑è‡∂Ω‡∂ö‡∂∫‡∑ô‡∂ö‡∑í":
                pass
            elif excp.message == "‡∂†‡∑ê‡∂ß‡∑ä ‡∑Ñ‡∂∏‡∑î ‡∂±‡∑ú‡∑Ä‡∑ì‡∂∫":
                pass
            elif excp.message == "‡∂†‡∑ê‡∂ß‡∑ä ‡∑É‡∑è‡∂∏‡∑è‡∂¢‡∑í‡∂ö‡∂∫‡∑è‡∑Ä ‡∑É‡∑ì‡∂∏‡∑è ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß / ‡∑É‡∑ì‡∂∏‡∑è ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß ‡∂¥‡∑ä‚Äç‡∂ª‡∂∏‡∑è‡∂´‡∑Ä‡∂≠‡∑ä ‡∂Ö‡∂∫‡∑í‡∂≠‡∑í‡∑Ä‡∑è‡∑É‡∑í‡∂ö‡∂∏‡∑ä ‡∂±‡∑ú‡∂∏‡∑ê‡∂≠":
                pass
            elif excp.message == "‡∑É‡∑Ñ‡∂∑‡∑è‡∂ú‡∑í‡∑Ä‡∂±‡∑ä‡∂±‡∑è_‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è_‡∂ö‡∂ª‡∂±‡∑ä‡∂±":
                pass
            elif excp.message == "Peer_id_invalid":  # Suspect this happens when a group is suspended by telegram.
                pass
            elif excp.message == "‡∂ö‡∂´‡∑ä‡∂©‡∑è‡∂∫‡∂∏‡∑ä ‡∂ö‡∂≠‡∑è‡∂∂‡∑Ñ ‡∂Ö‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫ ‡∂ö‡∂ª‡∂± ‡∂Ω‡∂Ø‡∑í":
                pass
            elif excp.message == "‡∂∏‡∑ñ‡∂Ω‡∑í‡∂ö ‡∂ö‡∂´‡∑ä‡∂©‡∑è‡∂∫‡∂∏‡∂ö‡∑í‡∂±‡∑ä ‡∂ë‡∂∫ ‡∂¥‡∂∫‡∑í‡∂±‡∑ä ‡∂ú‡∑ê‡∑É‡∑ì‡∂∏‡∂ß ‡∂¥‡∂ª‡∑í‡∑Å‡∑ì‡∂Ω‡∂ö‡∂∫‡∑ô‡∂ö‡∑î‡∂ú‡∑ö ‡∂Ü‡∂ª‡∑è‡∂∞‡∑í‡∂≠‡∂∫‡∑è ‡∑Ä‡∑í‡∂∫ ‡∂∫‡∑î‡∂≠‡∑î‡∂∫":
                pass
            elif excp.message == "‡∂†‡∑ê‡∂ß‡∑ä_‡∂¥‡∂ª‡∑í‡∂¥‡∑è‡∂Ω‡∂ö_‡∂Ö‡∑Ä‡∑Å‡∑ä‚Äç‡∂∫‡∂∫‡∑í":
                pass
            elif excp.message == "‡∂ö‡∂´‡∑ä‡∂©‡∑è‡∂∫‡∂∏‡∑ä ‡∂¥‡∂ª‡∑í‡∂¥‡∑è‡∂Ω‡∂ö‡∂∫‡∑í‡∂±‡∑ä‡∂ß kick ‡∂ú‡∑ê‡∑É‡∑í‡∂∫ ‡∑Ñ‡∑ê‡∂ö‡∑ä‡∂ö‡∑ö ‡∂∏‡∑ñ‡∂Ω‡∑í‡∂ö ‡∂ö‡∂´‡∑ä‡∂©‡∑è‡∂∫‡∂∏‡∂ö ‡∂±‡∑í‡∂ª‡∑ä‡∂∏‡∑è‡∂≠‡∑ò‡∂ß ‡∂¥‡∂∏‡∂´‡∑í":
                pass
            elif excp.message == "‡∂ö‡∑ä‚Äç‡∂ª‡∂∏‡∂∫ ‡∂Ω‡∂∂‡∑è ‡∂ú‡∂≠ ‡∑Ñ‡∑ê‡∂ö‡∑ä‡∂ö‡∑ö ‡∑É‡∑î‡∂¥‡∑í‡∂ª‡∑í ‡∂ö‡∂´‡∑ä‡∂©‡∑è‡∂∫‡∂∏‡∑ä ‡∑É‡∂≥‡∑Ñ‡∑è ‡∂¥‡∂∏‡∂´‡∑í":
                pass
            elif excp.message == "‡∂†‡∑ê‡∂ß‡∑ä ‡∂±‡∑í‡∂ª‡∑ä‡∂∏‡∑è‡∂≠‡∑ò ‡∂¥‡∑Ñ‡∂≠‡∑ä ‡∂ö‡∑Ö ‡∂±‡∑ú‡∑Ñ‡∑ê‡∂ö":
                pass
            else:
                message.reply_text("‡∂±‡∑í‡∑É‡∑è gmute ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß ‡∂±‡∑ú‡∑Ñ‡∑ê‡∂ö‡∑í ‡∑Ä‡∑í‡∂∫: {}".format(excp.message))
                send_to_list(bot, SUDO_USERS + SUPPORT_USERS, "‡∂±‡∑í‡∑É‡∑è gmute ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß ‡∂±‡∑ú‡∑Ñ‡∑ê‡∂ö‡∑í ‡∑Ä‡∑í‡∂∫: {}".format(excp.message))
                sql.ungmute_user(user_id)
                return
        except TelegramError:
            pass

    send_to_list(bot, SUDO_USERS + SUPPORT_USERS, "gmute complete!")
    message.reply_text("‡∂¥‡∑î‡∂Ø‡∑ä‡∂ú‡∂Ω‡∂∫‡∑è gmute ‡∂ö‡∂ª ‡∂á‡∂≠.")


@run_async
def ungmute(bot: Bot, update: Update, args: List[str]):
    message = update.effective_message  # type: Optional[Message]

    user_id = extract_user(message, args)
    if not user_id:
        message.reply_text("‡∂î‡∂∂ ‡∂¥‡∂ª‡∑í‡∑Å‡∑ì‡∂Ω‡∂ö‡∂∫‡∑ô‡∂ö‡∑î ‡∑Ä‡∑ô‡∂≠ ‡∂∫‡∑ú‡∂∏‡∑î ‡∑Ä‡∂± ‡∂∂‡∑Ä‡∂ö‡∑ä ‡∂±‡∑ú‡∂¥‡∑ô‡∂±‡∑ö.")
        return

    user_chat = bot.get_chat(user_id)
    if user_chat.type != 'private':
        message.reply_text("‡∂ë‡∂∫ ‡∂¥‡∂ª‡∑í‡∑Å‡∑ì‡∂Ω‡∂ö‡∂∫‡∑ô‡∂ö‡∑î ‡∂±‡∑ú‡∑Ä‡∑ö!")
        return

    if not sql.is_user_gmuted(user_id):
        message.reply_text("‡∂∏‡∑ô‡∂∏ ‡∂¥‡∂ª‡∑í‡∑Å‡∑ì‡∂Ω‡∂ö‡∂∫‡∑è gmuted ‡∂±‡∑ú‡∑Ä‡∑ö!")
        return

    muter = update.effective_user  # type: Optional[User]

    message.reply_text("‡∂∏‡∂∏ ‡∂â‡∂© ‡∂Ø‡∑ô‡∂±‡∑ä‡∂±‡∂∏‡∑ä {} ‡∂ú‡∑ù‡∂Ω‡∑ì‡∂∫‡∑Ä ‡∂±‡∑ê‡∑Ä‡∂≠ ‡∂ö‡∂≠‡∑è ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.".format(user_chat.first_name))

    send_to_list(bot, SUDO_USERS + SUPPORT_USERS,
                 "{} ‡∂â‡∑Ä‡∂≠‡∑ä ‡∂±‡∑ú‡∂ö‡∑Ö ‡∂¥‡∂ª‡∑í‡∑Å‡∑ì‡∂Ω‡∂ö‡∂∫‡∑ô‡∂ö‡∑î ‡∂á‡∂≠ {}".format(mention_html(muter.id, muter.first_name),
                                                   mention_html(user_chat.id, user_chat.first_name)),
                 html=True)

    chats = get_all_chats()
    for chat in chats:
        chat_id = chat.chat_id

        # Check if this group has disabled gmutes
        if not sql.does_chat_gmute(chat_id):
            continue

        try:
            member = bot.get_chat_member(chat_id, user_id)
            if member.status == 'restricted':
                bot.restrict_chat_member(chat_id, int(user_id),
                                     can_send_messages=True,
                                     can_send_media_messages=True,
                                     can_send_other_messages=True,
                                     can_add_web_page_previews=True)

        except BadRequest as excp:
            if excp.message == "‡∂¥‡∂ª‡∑í‡∑Å‡∑ì‡∂Ω‡∂ö‡∂∫‡∑è ‡∂†‡∑ê‡∂ß‡∑ä ‡∑Ñ‡∑í ‡∂¥‡∂ª‡∑í‡∂¥‡∑è‡∂Ω‡∂ö‡∂∫‡∑ô‡∂ö‡∑í":
                pass
            elif excp.message == "‡∂†‡∑ê‡∂ß‡∑ä ‡∑Ñ‡∂∏‡∑î ‡∂±‡∑ú‡∑Ä‡∑ì‡∂∫":
                pass
            elif excp.message == "‡∂†‡∑ê‡∂ß‡∑ä ‡∑É‡∑è‡∂∏‡∑è‡∂¢‡∑í‡∂ö‡∂∫‡∑è‡∑Ä ‡∑É‡∑ì‡∂∏‡∑è ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß / ‡∑É‡∑ì‡∂∏‡∑è ‡∂±‡∑ú‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß ‡∂¥‡∑ä‚Äç‡∂ª‡∂∏‡∑è‡∂´‡∑Ä‡∂≠‡∑ä ‡∂Ö‡∂∫‡∑í‡∂≠‡∑í‡∑Ä‡∑è‡∑É‡∑í‡∂ö‡∂∏‡∑ä ‡∂±‡∑ú‡∂∏‡∑ê‡∂≠":
                pass
            elif excp.message == "‡∂¥‡∂ª‡∑í‡∑Å‡∑ì‡∂Ω‡∂ö‡∂∫‡∑è_‡∑É‡∑Ñ‡∂∑‡∑è‡∂ú‡∑ì_‡∂±‡∑ú‡∑Ä‡∑ô":
                pass
            elif excp.message == "‡∑É‡∑î‡∂¥‡∑í‡∂ª‡∑í ‡∂ö‡∂´‡∑ä‡∂©‡∑è‡∂∫‡∂∏‡∑ä ‡∑É‡∑Ñ ‡∂±‡∑è‡∂Ω‡∑í‡∂ö‡∑è ‡∂ö‡∂≠‡∑è‡∂∂‡∑É‡∑ä ‡∑É‡∂≥‡∑Ñ‡∑è ‡∂¥‡∂∏‡∂´‡∂ö‡∑ä ‡∂ö‡∑ä‚Äç‡∂ª‡∂∏‡∂∫ ‡∂≠‡∑í‡∂∂‡∑ö":
                pass
            elif excp.message == "‡∂†‡∑ê‡∂ß‡∑ä ‡∂ë‡∂ö‡∑ö ‡∂±‡∑ê‡∑Ñ‡∑ê":
                pass
            elif excp.message == "‡∂±‡∑è‡∂Ω‡∑í‡∂ö‡∑è‡∑Ä_‡∂¥‡∑î‡∂Ø‡∑ä‡∂ú‡∂Ω‡∑í‡∂ö‡∂∫‡∑í:
                pass
            elif excp.message == "‡∂†‡∑ê‡∂ß‡∑ä_‡∂¥‡∂ª‡∑í‡∂¥‡∑è‡∂Ω‡∂ö_‡∂Ö‡∑Ä‡∑Å‡∑ä‚Äç‡∂∫‡∂∫‡∑í":
                pass
            else:
                message.reply_text("‡∂∏‡∑ö ‡∂±‡∑í‡∑É‡∑è ‡∂â‡∑Ä‡∂≠‡∑ä ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß ‡∂±‡∑ú‡∑Ñ‡∑ê‡∂ö‡∑í ‡∑Ä‡∑í‡∂∫: {}".format(excp.message))
                bot.send_message(OWNER_ID, "‡∂∏‡∑ö ‡∂±‡∑í‡∑É‡∑è ‡∂â‡∑Ä‡∂≠‡∑ä ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß ‡∂±‡∑ú‡∑Ñ‡∑ê‡∂ö‡∑í ‡∑Ä‡∑í‡∂∫: {}".format(excp.message))
                return
        except TelegramError:
            pass

    sql.ungmute_user(user_id)

    send_to_list(bot, SUDO_USERS + SUPPORT_USERS, "un-gmute complete!")

    message.reply_text("‡∂¥‡∑î‡∂Ø‡∑ä‡∂ú‡∂Ω‡∂∫‡∑è ‡∂±‡∑í‡∂ª‡∑î‡∂¥‡∂Ø‡∑ä‚Äç‡∂ª‡∑í‡∂≠‡∑Ä ‡∂á‡∂≠.")


@run_async
def gmutelist(bot: Bot, update: Update):
    muted_users = sql.get_gmute_list()

    if not muted_users:
        update.effective_message.reply_text("Gmuted ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∂ª‡∂±‡∑ä‡∂±‡∂±‡∑ä ‡∂±‡∑ú‡∂∏‡∑ê‡∂≠! ‡∂∏‡∂∏ ‡∑Ñ‡∑í‡∂≠‡∑î‡∑Ä‡∂ß ‡∑Ä‡∂©‡∑è ‡∂î‡∂∫‡∑è ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∑Ä‡∂±‡∑ä‡∂≠‡∂∫‡∑í ...üòäüòò")
        return

    mutefile = 'Screw these guys.\n'
    for user in muted_users:
        mutefile += "[x] {} - {}\n".format(user["name"], user["user_id"])
        if user["reason"]:
            mutefile += "Reason: {}\n".format(user["reason"])

    with BytesIO(str.encode(mutefile)) as output:
        output.name = "gmutelist.txt"
        update.effective_message.reply_document(document=output, filename="gmutelist.txt",
                                                caption="‡∂Ø‡∑ê‡∂±‡∂ß gmuted ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∂ª‡∂±‡∑ä‡∂±‡∂±‡∑ä‡∂ú‡∑ö ‡∂Ω‡∑ê‡∂∫‡∑í‡∑É‡∑ä‡∂≠‡∑î‡∑Ä ‡∂∏‡∑ô‡∂±‡∑ä‡∂±.")


def check_and_mute(bot, update, user_id, should_message=True):
    if sql.is_user_gmuted(user_id):
        bot.restrict_chat_member(update.effective_chat.id, user_id, can_send_messages=False)
        if should_message:
            update.effective_message.reply_text("This is a bad person, I'll silence them for you!")


@run_async
def enforce_gmute(bot: Bot, update: Update):
    # Not using @restrict handler to avoid spamming - just ignore if cant gmute.
    if sql.does_chat_gmute(update.effective_chat.id) and update.effective_chat.get_member(bot.id).can_restrict_members:
        user = update.effective_user  # type: Optional[User]
        chat = update.effective_chat  # type: Optional[Chat]
        msg = update.effective_message  # type: Optional[Message]

        if user and not is_user_admin(chat, user.id):
            check_and_mute(bot, update, user.id, should_message=True)
        if msg.new_chat_members:
            new_members = update.effective_message.new_chat_members
            for mem in new_members:
                check_and_mute(bot, update, mem.id, should_message=True)
        if msg.reply_to_message:
            user = msg.reply_to_message.from_user  # type: Optional[User]
            if user and not is_user_admin(chat, user.id):
                check_and_mute(bot, update, user.id, should_message=True)

@run_async
@user_admin
def gmutestat(bot: Bot, update: Update, args: List[str]):
    if len(args) > 0:
        if args[0].lower() in ["on", "yes"]:
            sql.enable_gmutes(update.effective_chat.id)
            update.effective_message.reply_text("‡∂∏‡∂∏ ‡∂∏‡∑ô‡∂∏ ‡∂ö‡∂´‡∑ä‡∂©‡∑è‡∂∫‡∂∏‡∑ö gmutes ‡∑É‡∂ö‡∑ä‚Äç‡∂ª‡∑ì‡∂∫ ‡∂ö‡∂ª ‡∂á‡∂≠. ‡∂∏‡∑ô‡∂∫ ‡∂î‡∂∂‡∑Ä ‡∂Ü‡∂ª‡∂ö‡∑ä‡∑Ç‡∑è ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß ‡∂ã‡∂¥‡∂ö‡∑è‡∂ª‡∑ì ‡∑Ä‡∑ö "
                                                "‡∂Ö‡∂∫‡∑è‡∂†‡∑í‡∂≠ ‡∂≠‡∑ê‡∂¥‡∑ê‡∂Ω‡∑ä, ‡∂Ö‡∂¥‡∑ä‚Äç‡∂ª‡∑É‡∂±‡∑ä‡∂± ‡∂†‡∂ª‡∑í‡∂≠ ‡∑É‡∑Ñ ‡∂Ö‡∂±‡∑í‡∂ª‡∑î‡∂Ø‡∑ä ‡∑Ä‡∑ô‡∂≠‡∑í‡∂±‡∑ä.")
        elif args[0].lower() in ["off", "no"]:
            sql.disable_gmutes(update.effective_chat.id)
            update.effective_message.reply_text("‡∂∏‡∂∏ ‡∂∏‡∑ô‡∂∏ ‡∂ö‡∂´‡∑ä‡∂©‡∑è‡∂∫‡∂∏‡∑ö gmutes ‡∂Ö‡∂ö‡∑ä‚Äç‡∂ª‡∑ì‡∂∫ ‡∂ö‡∂ª ‡∂á‡∂≠. GMutes ‡∂î‡∂∂‡∑ö ‡∂¥‡∂ª‡∑í‡∑Å‡∑ì‡∂Ω‡∂ö‡∂∫‡∑í‡∂±‡∑ä‡∂ß ‡∂∂‡∂Ω‡∂¥‡∑è‡∂±‡∑ä‡∂±‡∑ö ‡∂±‡∑ê‡∂≠"
                                                "‡∂≠‡∑Ä‡∂Ø‡∑î‡∂ª‡∂ß‡∂≠‡∑ä. ‡∂î‡∂∂‡∂ß ‡∂Ö‡∂©‡∑î ‡∂Ü‡∂ª‡∂ö‡∑ä‡∑Ç‡∑è‡∑Ä‡∂ö‡∑ä ‡∂Ω‡∑ê‡∂∂‡∑ô‡∂±‡∑î ‡∂á‡∂≠!")
    else:
        update.effective_message.reply_text("‡∂¥‡∑É‡∑î‡∂∂‡∑í‡∂∏‡∂ö‡∑ä ‡∂≠‡∑ù‡∂ª‡∑è ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∂ß ‡∂∏‡∂ß ‡∂≠‡∂ª‡∑ä‡∂ö ‡∂ö‡∑í‡∑Ñ‡∑í‡∂¥‡∂∫‡∂ö‡∑ä ‡∂Ø‡∑ô‡∂±‡∑ä‡∂±! on/off, yes/no!\n\n"
                                            "‡∂î‡∂∂‡∂ú‡∑ö ‡∑Ä‡∂ª‡∑ä‡∂≠‡∂∏‡∑è‡∂± ‡∑É‡∑ê‡∂ö‡∑É‡∑î‡∂∏: {}\n"
                                            "‡∑É‡∂≠‡∑ä‚Äç‡∂∫ ‡∑Ä‡∑ñ ‡∑Ä‡∑í‡∂ß, ‡∑É‡∑í‡∂Ø‡∑î‡∑Ä‡∂± ‡∂ï‡∂±‡∑ë‡∂∏ ‡∑Ä‡∑í‡∂ö‡∑è‡∂ª‡∂∫‡∂ö‡∑ä ‡∂î‡∂∂‡∂ú‡∑ö ‡∂ö‡∂´‡∑ä‡∂©‡∑è‡∂∫‡∂∏ ‡∂≠‡∑î‡∑Ö ‡∂Ø ‡∑É‡∑í‡∂Ø‡∑î‡∑Ä‡∂±‡∑î ‡∂á‡∂≠. "
                                            "‡∂Ö‡∑É‡∂≠‡∑ä‚Äç‡∂∫ ‡∑Ä‡∑ñ ‡∑Ä‡∑í‡∂ß, ‡∂î‡∑Ä‡∑î‡∂±‡∑ä ‡∂ë‡∑É‡∑ö ‡∂±‡∑ú‡∂ö‡∂ª‡∂±‡∑î ‡∂á‡∂≠"
                                            "spammers.".format(sql.does_chat_gmute(update.effective_chat.id)))


def __stats__():
    return "{} gmuted users.".format(sql.num_gmuted_users())


def __user_info__(user_id):
    is_gmuted = sql.is_user_gmuted(user_id)

    text = "Globally muted: <b>{}</b>"
    if is_gmuted:
        text = text.format("Yes")
        user = sql.get_gmuted_user(user_id)
        if user.reason:
            text += "\nReason: {}".format(html.escape(user.reason))
    else:
        text = text.format("No")
    return text


def __migrate__(old_chat_id, new_chat_id):
    sql.migrate_chat(old_chat_id, new_chat_id)


def __chat_settings__(chat_id, user_id):
    return "This chat is enforcing *gmutes*: `{}`.".format(sql.does_chat_gmute(chat_id))


__help__ = """
*‡∂¥‡∂ª‡∑í‡∂¥‡∑è‡∂Ω‡∂ö ‡∂¥‡∂∏‡∂´‡∑í:*
 - /gbanstat <on/off/yes/no>:‡∂î‡∂∂‡∂ú‡∑ö ‡∂ö‡∂´‡∑ä‡∂©‡∑è‡∂∫‡∂∏‡∂ß ‡∂ú‡∑ù‡∂Ω‡∑ì‡∂∫ ‡∂≠‡∑Ñ‡∂±‡∂∏‡∑ö ‡∂∂‡∂Ω‡∂¥‡∑ë‡∂∏ ‡∂Ö‡∂ö‡∑ä‚Äç‡∂ª‡∑ì‡∂∫ ‡∂ö‡∂ª‡∂±‡∑î ‡∂á‡∂≠, ‡∂±‡∑ê‡∂≠‡∑Ñ‡∑ú‡∂≠‡∑ä ‡∂î‡∂∂‡∂ú‡∑ö ‡∑Ä‡∂ª‡∑ä‡∂≠‡∂∏‡∑è‡∂± ‡∑É‡∑ê‡∂ö‡∑É‡∑î‡∂∏‡∑ä ‡∂±‡∑ê‡∑Ä‡∂≠ ‡∂Ω‡∂∂‡∑è ‡∂Ø‡∑ô‡∂±‡∑î ‡∂á‡∂≠.
‡∂ú‡∑ù‡∂Ω‡∑ì‡∂∫ ‡∂≠‡∑Ñ‡∂±‡∂∏ ‡∂Ω‡∑ô‡∑É‡∂Ø ‡∑Ñ‡∑ê‡∂≥‡∑í‡∂±‡∑ä‡∑Ä‡∑ô‡∂± ‡∂ú‡∑ä‡∂∂‡∑è‡∂±‡∑ä‡∑É‡∑ä, ‡∑É‡∑í‡∂∫‡∂Ω‡∑î‡∂∏ ‡∂ö‡∂´‡∑ä‡∂©‡∑è‡∂∫‡∂∏‡∑ä ‡∑Ñ‡∂ª‡∑Ñ‡∑è ‡∂Ö‡∂∫‡∑è‡∂†‡∑í‡∂≠ ‡∂≠‡∑ê‡∂¥‡∑ê‡∂Ω‡∑ä ‡∂≠‡∑Ñ‡∂±‡∂∏‡∑ä ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏ ‡∑É‡∂≥‡∑Ñ‡∑è ‡∂∂‡∑ú‡∂ß‡∑ä ‡∑Ñ‡∑í‡∂∏‡∑í‡∂ö‡∂ª‡∑î‡∑Ä‡∂±‡∑ä ‡∑Ä‡∑í‡∑É‡∑í‡∂±‡∑ä ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∂ª‡∂±‡∑î ‡∂Ω‡∑ê‡∂∂‡∑ö. ‡∂∏‡∑ô‡∂∫ ‡∂Ü‡∂ª‡∂ö‡∑ä‡∑Ç‡∑è ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß ‡∂ã‡∂¥‡∂ö‡∑è‡∂ª‡∑ì ‡∑Ä‡∑ö \
‡∂î‡∂∂ ‡∑É‡∑Ñ ‡∂î‡∂∂‡∑ö ‡∂ö‡∂´‡∑ä‡∂©‡∑è‡∂∫‡∂∏‡∑ä ‡∑Ñ‡∑ê‡∂ö‡∑í ‡∂â‡∂ö‡∑ä‡∂∏‡∂±‡∑í‡∂±‡∑ä ‡∂Ö‡∂∫‡∑è‡∂†‡∑í‡∂≠ ‡∂≠‡∑ê‡∂¥‡∑ê‡∂Ω‡∑ä ‡∂ú‡∂Ç‡∑Ä‡∂≠‡∑î‡∂ª ‡∂â‡∑Ä‡∂≠‡∑ä ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∑ô‡∂±‡∑ä. Call ‡∂á‡∂∏‡∂≠‡∑ì‡∂∏‡∑ô‡∂±‡∑ä ‡∂í‡∑Ä‡∑è ‡∂î‡∂∂‡∂ú‡∑ö ‡∂ö‡∂´‡∑ä‡∂©‡∑è‡∂∫‡∂∏ ‡∑É‡∂≥‡∑Ñ‡∑è ‡∂Ö‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫ ‡∂ö‡∑Ö ‡∑Ñ‡∑ê‡∂ö‡∑í‡∂∫
/gbanstat
"""

__mod_name__ = "Global Mute"

GMUTE_HANDLER = CommandHandler("gmute", gmute, pass_args=True,
                              filters=CustomFilters.sudo_filter | CustomFilters.support_filter)
UNGMUTE_HANDLER = CommandHandler("ungmute", ungmute, pass_args=True,
                                filters=CustomFilters.sudo_filter | CustomFilters.support_filter)
GMUTE_LIST = CommandHandler("gmutelist", gmutelist,
                           filters=CustomFilters.sudo_filter | CustomFilters.support_filter)

GMUTE_STATUS = CommandHandler("gmutestat", gmutestat, pass_args=True, filters=Filters.group)

GMUTE_ENFORCER = MessageHandler(Filters.all & Filters.group, enforce_gmute)

dispatcher.add_handler(GMUTE_HANDLER)
dispatcher.add_handler(UNGMUTE_HANDLER)
dispatcher.add_handler(GMUTE_LIST)
dispatcher.add_handler(GMUTE_STATUS)

if STRICT_GMUTE:
    dispatcher.add_handler(GMUTE_ENFORCER, GMUTE_ENFORCE_GROUP)
